[{"authors":null,"categories":null,"content":"Learning is my greatest passion. Over the years I have honed my interests primarily to real time computer graphics as well as the topics that enable them. In addition to graphics APIs this includes the backing mathematical concepts for geometry and physics. Understanding CPUs, GPUs, their caches and vectorization options, as well as how they interact with memory in conjunction with their threading models has led to a different way of reasoning about the code I write. Finding the right architecture for a problem as well as leveraging data structures and algorithms to accelerate computation has allowed me to make some interesting projects. While these topics hold particular interest for me, I am always learning about exciting ideas in math, physics, artificial intelligence, machine learning, and other similar topics in my spare time.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"1a61d32e3530a0bcc34346130b58c023","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Learning is my greatest passion. Over the years I have honed my interests primarily to real time computer graphics as well as the topics that enable them. In addition to graphics APIs this includes the backing mathematical concepts for geometry and physics.","tags":null,"title":"Robert Plante","type":"authors"},{"authors":[],"categories":[],"content":"A large project at work required the ability to go from ground level to an altitude of 20,000ft. in an instant while remaining performant enough for VR headsets. While there existed some solutions out there to manage larger worlds within Unity, none of them met the projectâ€™s requirements. I set out to create a system that treated the real-world terrain data as a nested subdivision tree. Each layer of subdivision can have multiple LODs for better performance and each cell of the layer can be comprised of an arbitrary whole number of divisions of the next greatest resolution. Since every cell is loaded asynchronously the system ensures that there is never a gap in the ground by only switching out cells when all are ready (does not apply to very first load). What makes this solution novel is that there is support for more than one effector on the structure of the grid and how each effector influences the grid can adjust dynamically over time. The system regularly calculates what shape satisfies all conditions and dynamically loads tiles of various resolutions that are stored as Unity scenes. The system also integrates an origin-shifting solution to manage areas far larger than the physics system will typically allow. The system similarly maintains a cache of recently processed tiles to accelerate hops to and from a distant area. The video below shows how the system can manage a large area (over six hundred square kilometers) with ease. Even in the editor the system can help maintain over 350fps for an area this size.\n","date":1669689630,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1669689630,"objectID":"dbc84946ff1a2882dab0b0657ed3578d","permalink":"https://plantingcode.net/project/large-scale-environments/","publishdate":"2022-11-28T21:40:30-05:00","relpermalink":"/project/large-scale-environments/","section":"project","summary":"Managing large sections of real-world data for high-speed traversal in VR","tags":[],"title":"Large Scale Environments","type":"project"},{"authors":[],"categories":[],"content":"The final project for Simulation of Biology was to create a mass-spring simulation with two simple creatures. The expectation was to create a top-down 2D system with creatures using just a few springs and point masses to move. For the project, I opted instead to create a 3D simulation with simple fluid dynamics for an eel and a Coulomb friction-based collision system with internal pressure forces for the blob. The project uses muscle contractions and physics interactions with the environment to move both the creatures. I also made it possible to control the creatures directly using the W/A/S/D keys on the keyboard. Both creatures are dynamically configurable in terms of resolution as well. The blob in the video below is comprised of 728 points and 2904 springs, all of which undergo a small amount of contraction/expansion to drive motion. The eel in the video below consists of 308 points and 1420 total springs with 49 springs along the lateral lines of the body acting as actuated muscles.\n","date":1669689620,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1669689620,"objectID":"d603c019c5874e19875f2defca663312","permalink":"https://plantingcode.net/project/mass-spring-simulation/","publishdate":"2022-11-28T21:40:20-05:00","relpermalink":"/project/mass-spring-simulation/","section":"project","summary":"Simulating an aquatic creature with a mass-spring body and basic fluid dynamics","tags":[],"title":"Mass Spring Simulation","type":"project"},{"authors":[],"categories":[],"content":"Project 4 for Simulation of Biology was the classic Boids simulation as described by Craig W. Reynolds in 1987. The expected outcome was just enough 2D Boids to exhibit flocking behavior with either toroidal wrapping boundaries, or hard boundaries that deflect incoming Boids. The ability to turn particular forces on/off on demand and attract/repel the Boids from the mouse was also required. Leveraging data-oriented principles, multi-threading, frustum culling during the render phase, and OpenGL display lists to cache the OpenGL 1.0 geometry calls I was able to create an interactive 3D Boids simulation that could support thousands of Boids simultaneously. While using an Octree data structure to accelerate spatial searching was considered, it ended up not being the limiting factor for performance.\n","date":1669689610,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1669689610,"objectID":"c6569e2b0e725c68600d87f81a39edb2","permalink":"https://plantingcode.net/project/boids/","publishdate":"2022-11-28T21:40:10-05:00","relpermalink":"/project/boids/","section":"project","summary":"Highly parallel 3D boids numbering in the thousands","tags":[],"title":"Boids","type":"project"},{"authors":[],"categories":[],"content":"Project 2 for Foundation of Computer Graphics was a configurable viral transmission simulation using small circles with limited agency to simulate viral spread. In addition to taking a multi-threaded approach to increase the number of individuals that could be simulated, the various visual states were pre-rendered and cached for quick blitting to the canvas. Individual agents were given a few additional parameters that influenced behavior around others when navigating to their goal points. The primary addition was a caution parameter that increased as the agent came into contact with known infected individuals. Higher caution values would cause the agent to distance themselves from others, put on a mask, and be more likely to avoid behaviors that would lead them to bumping into other individuals.\n","date":1669689598,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1669689598,"objectID":"8f1b77fc9a048c13dff3868393422c0e","permalink":"https://plantingcode.net/project/viral-sim/","publishdate":"2022-11-28T21:39:58-05:00","relpermalink":"/project/viral-sim/","section":"project","summary":"Simulating viral spread with cautious agents","tags":[],"title":"Viral Simulation","type":"project"},{"authors":[],"categories":[],"content":"Project 3 for Foundation of Computer Graphics was to use two curves in 3D space to create a pipe with a bonus aspect for coming up with a symmetric solution for the pipe or being able to show an osculating ball that would roll along one curve while not ever being pierced by the other. In addition to performance improvements from using OpenGL display lists, I came up with what may be an original solution to the problem by way of what I call the wrapping paper or ribbon method for continuously mapping one curve onto the other. The process starts with discretized versions of the curves and the two points from each curve that are closest to one another across all points. The process then marches along the curves point by point creating triangles by selecting the shorter of the next two edge candidates. This results in a ribbon between the curves that is then used for finding a more stable mid-point mapping between the curves than other solutions that only consider the absolute closest point of the other curve regardless of context. This also produces a symmetric solution that does not depend on which curve is the basis for solving the problem.\n","date":1669688213,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1669688213,"objectID":"3a1b937c04095bed886db955b4052efc","permalink":"https://plantingcode.net/project/ribbon-curves/","publishdate":"2022-11-28T21:16:53-05:00","relpermalink":"/project/ribbon-curves/","section":"project","summary":"Bridging two curves in three dimensions using a ribbon-like approach","tags":[],"title":"Ribbon Curves","type":"project"}]